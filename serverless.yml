service: process-transfers

frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  stage: dev

  environment:
    AWS_STAGE: dev
    DYNAMODB_TABLE_TRANSFER: Transfers-${self:provider.stage}
    DYNAMODB_TABLE_ACCOUNT: Accounts-${self:provider.stage}

  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: 
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_TRANSFER}"
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ACCOUNT}"

# package:
#   individually: true

# custom:
#   localstack:
#       debug: true
#       edgePort: 4566
#       autostart: false
#       host: http://localhost
#       stages: [local]
#       lambda:
#         mountCode: true


# plugins:
#   - serverless-localstack

functions:
  process-transfers:
    image: 537782080257.dkr.ecr.us-east-1.amazonaws.com/process-transfers:latest
    events:
      - http:
          path: /process/transfer
          method: POST
          cors: true


resources:
  Resources:
    MerchantsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_TRANSFER}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    AccountsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_ACCOUNT}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1